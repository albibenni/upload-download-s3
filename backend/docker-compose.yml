services:
  # backend:
  #   build:
  #     context: .
  #     dockerfile: dockerfile
  #   env_file: .env
  #   depends_on:
  #     - postgres
  #     - s3ninja
  #   networks:
  #     - my-network

  # postgres:
  #   container_name: albibenni
  #   image: postgres
  #   restart: always
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   env_file: .env.local
  #   networks:
  #     - my-network
  postgres:
    container_name: file
    image: postgres
    restart: always
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # environment:
    #   - POSTGRES_USER=${POSTGRES_USER}
    #   - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #   - POSTGRES_DB=${POSTGRES_DB}
    env_file: .env.local
    # networks:
    #   - my-network

  # s3ninja:
  #   hostname: storage.local
  #   image: scireum/s3-ninja:latest
  #   expose:
  #     - '9000'
  #   volumes:
  #     - ./docker/storage_data:/home/sirius/data
  #   networks:
  #     - my-network
  ## S3 Service
  # minio:
  #   container_name: aws-s3
  #   image: minio/minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   volumes:
  #     - ./docker/minio-storage:/home/data
  #   command: server --console-address ":9001" /data
  #   env_file: .env.local
  #   restart: always

  minio:
    container_name: aws-s3
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./docker/minio-storage:/data
    command: server --console-address ":9001" /data
    env_file: .env.local
    restart: always
    # networks:
    #   - my-network
volumes:
  postgres_data:
  minio_storage:
# networks:
#   my-network:
#     driver: bridge
